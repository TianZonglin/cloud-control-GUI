#pragma once

//  GraphDrawing:					Encodes the 2D drawing of a graph. The drawing doesn't store an explicit reference back to the graph.
//									Instead, we build the drawing from a graph (given as a Graph), and next use the drawing.
//									A drawing is encoded as a set of curves (polylines).  
//
//
//


#include "include/point2d.h"
#include "include/Point3d.h"
#include <vector>
#include <unordered_map>
#include <map>


class Graph;
class Polyline;



class GraphDrawing
{
public:

enum COLOR_MODE			//Types of color mapping used for edges	
	 { 
		GRAYSCALE = 0,
		RAINBOW,
		INVERSE_RAINBOW,
		DIRECTIONAL,
		FLAT,
		DENSITY_MAP,
        DISPLACEMENT
	 };

enum ALPHA_MODE			//Types of transparency mapping used for edges	
	 { 
		ALPHA_CONSTANT = 0,
		ALPHA_VALUE,
		ALPHA_INVERSE_VALUE
	 };



typedef std::unordered_map<int,Polyline*>	Row;
typedef std::multimap<float,Polyline*>	DrawingOrder;


						GraphDrawing();
virtual				   ~GraphDrawing();	
const GraphDrawing&		operator=(const GraphDrawing& rhs);
void					build(const Graph*,const PointSet*);
const Row&				operator()(int i) const { return drawing[i]; }
Row&					operator()(int i)		{ return drawing[i]; }
int						numNodes() const		{ return drawing.size(); }
int						numEdges() const		{ return num_edges; }
virtual void			draw() const;
void					normalize(const Point2d& dim,float border);
void					saveTrails(const char* fn,bool bundled) const;
bool					readTrails(const char* fn,bool only_endpoints=false,int max_edges=-1);
void					interpolate(const GraphDrawing&,float relaxation,float dir_separation,float displ_max,bool displ_absolute);
void					resample(float delta,float jitter=0);

std::vector<Row>		drawing;			//edges from i-th point to all points > i
int						num_edges;          //#edges in this drawing
DrawingOrder			draw_order;			//edges sorted by some (drawing) order
float					val_min,val_max;	//range of edge values
bool					draw_points;		//whether to draw control points	
bool					draw_edges;			//whether to draw edges (polylines)
bool					draw_endpoints;		//whether to draw edge endpoints
float					line_width;			//line width in drawing
float					global_alpha;		//Global transparency factor
bool					global_blend;		//Global blending on/off
COLOR_MODE				color_mode;			//Colormap used for edges
ALPHA_MODE				alpha_mode;			//Alpha map used for edges
int						densityMapSize;		//Density map size (see below)
float*					densityMap;			//Density map (for drawing, not owned); Either 0 (not initialized), or initialized to a densityMapSize^2 array
float*					shadingMap;			//Shading map (for drawing, not owned); as above
float*					densityMax;			//Max value of densityMap[] (for drawing, not owned)
bool					use_density_alpha;	//Use density map to modulate global alpha
bool					shading;			//Use shading (illumination) atop of color-mapping
Point3d					light;				//Normalized light vector (for shading)
float					amb_factor;			//Ambient, diffuse, and specular factors for shading
float					diff_factor;
float					spec_factor;
float					spec_highlight_size;//Power-factor for size of specular highlight
bool					draw_background;	//Whether to draw the background image or not

protected:

void					float2alpha(float value,float& alpha) const;
void					float2rgb(float value,float* rgb) const;
bool					readBackground(const char* filename);
void					drawBackground() const;

float					scale;
Point2d					translation;
Point2d					background_size;
};


